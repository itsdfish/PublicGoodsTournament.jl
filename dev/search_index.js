var documenterSearchIndex = {"docs":
[{"location":"api/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [PublicGoodsTournement]\nOrder   = [:type]","category":"page"},{"location":"api/#PublicGoodsTournement.AbstractPlayer","page":"API","title":"PublicGoodsTournement.AbstractPlayer","text":"AbstractPlayer\n\nAn abstract player type for the public goods game. Subtypes of this abstract type must have the following fields\n\nFields\n\nid: unique player id \ntrial_start_money::Float64: the amount of money at the beginning of a trial\n\n\n\n\n\n","category":"type"},{"location":"api/#PublicGoodsTournement.AbstractPublicGoodsGame","page":"API","title":"PublicGoodsTournement.AbstractPublicGoodsGame","text":"AbstractPublicGoodsGame\n\nAn abstract public goods game object which expects the following fields.\n\nFields\n\ntotal_money::Dict{T, Float64}: the total amount of money for each player\npublic_goods_multiplier::Float64: the amount by which pooled contributions are multipled\ntrial_start_money: the amount of money given to an player at the begining of each trial\nmax_punishment_amount::Float64: the maximum amount that an player can punish on any given trial\n\n\n\n\n\n","category":"type"},{"location":"api/#PublicGoodsTournement.Chris","page":"API","title":"PublicGoodsTournement.Chris","text":"Chris <: AbstractPlayer\n\nA player type for the iterated public goods game. The API requireds the following  fields, but more can be added to support your player's strategy.\n\nFields\n\nid::Symbol: a unique name for the player \nids::T: a list of all player ids excluding player\ntrial_start_money: the money provided at the begining of each trial \ntotal_money: the cumulative money earned across completed trials \n\n\n\n\n\n","category":"type"},{"location":"api/#PublicGoodsTournement.Chris-Tuple{}","page":"API","title":"PublicGoodsTournement.Chris","text":"Chris(; id, ids, game_config)\n\nA constructor for the Chris player type. Additional keyword arguments can be added and passed via  args in the function battle!.\n\nKeywords\n\nid: the Chris player id \nids: a list of all player ids excluding player\ngame_config: a set of keywords corresponding to parameters of the iterated public goods game\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.Cuck","page":"API","title":"PublicGoodsTournement.Cuck","text":"Cuck <: AbstractPlayer\n\nA Cuck type for the iterated public goods game. The chuck contributes its entire trial endowment to the public good  and does not punish. \n\nFields\n\nid::Symbol: a unique name for the player \nids::T: a list of all player ids excluding player id\ntrial_start_money: the money provided at the begining of each trial \ntotal_money: the cumulative money earned across completed trials \n\n\n\n\n\n","category":"type"},{"location":"api/#PublicGoodsTournement.Cuck-Tuple{}","page":"API","title":"PublicGoodsTournement.Cuck","text":"Cuck(; id, ids, game_config)\n\nA constructor for the Cuck player type. Additional keyword arguments can be added and passed via  args in the function battle!.\n\nKeywords\n\nid: the Cuck player id \nids: a list of all player ids excluding player id\ngame_config: a set of keywords corresponding to parameters of the iterated public goods game\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.Dad","page":"API","title":"PublicGoodsTournement.Dad","text":"Dad <: AbstractPlayer\n\nA player type for the iterated public goods game. The API requireds the following  fields, but more can be added to support your player's strategy.\n\nFields\n\nid::Symbol: a unique name for the player \nids::T: a list of all player ids excluding player\ntrial_start_money: the money provided at the begining of each trial \ntotal_money: the cumulative money earned across completed trials \n\n\n\n\n\n","category":"type"},{"location":"api/#PublicGoodsTournement.Dad-Tuple{}","page":"API","title":"PublicGoodsTournement.Dad","text":"Dad(; id, ids, game_config)\n\nA constructor for the Dad player type. Additional keyword arguments can be added and passed via  args in the function battle!.\n\nKeywords\n\nid: the Dad player id \nids: a list of all player ids excluding player\ngame_config: a set of keywords corresponding to parameters of the iterated public goods game\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.DoucheBag","page":"API","title":"PublicGoodsTournement.DoucheBag","text":"DoucheBag{T} <: AbstractPlayer\n\nA DoucheBag type for the iterated public goods game. The douche bag contributes no money to the public good  and punishes other players indiscriminantly. \n\nFields\n\nid::Symbol: a unique name for the player \nids::T: a list of all player ids excluding player id\ntrial_start_money: the money provided at the begining of each trial \ntotal_money: the cumulative money earned across completed trials \n\n\n\n\n\n","category":"type"},{"location":"api/#PublicGoodsTournement.DoucheBag-Tuple{}","page":"API","title":"PublicGoodsTournement.DoucheBag","text":"DoucheBag(; id, ids, game_config)\n\nA constructor for the DoucheBag player type. Additional keyword arguments can be added and passed via  args in the function battle!.\n\nKeywords\n\nid: the DoucheBag player id \nids: a list of all player ids excluding player id\ngame_config: a set of keywords corresponding to parameters of the iterated public goods game\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.Mary","page":"API","title":"PublicGoodsTournement.Mary","text":"Mary <: AbstractPlayer\n\nA player type for the iterated public goods game. The API requireds the following  fields, but more can be added to support your player's strategy.\n\nFields\n\nid::Symbol: a unique name for the player \nids::T: a list of all player ids excluding player\ntrial_start_money: the money provided at the begining of each trial \ntotal_money: the cumulative money earned across completed trials \n\n\n\n\n\n","category":"type"},{"location":"api/#PublicGoodsTournement.Mary-Tuple{}","page":"API","title":"PublicGoodsTournement.Mary","text":"Mary(; id, ids, game_config)\n\nA constructor for the Mary player type. Additional keyword arguments can be added and passed via  args in the function battle!.\n\nKeywords\n\nid: the Mary player id \nids: a list of all player ids excluding player\ngame_config: a set of keywords corresponding to parameters of the iterated public goods game\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.Papi","page":"API","title":"PublicGoodsTournement.Papi","text":"Papi <: AbstractPlayer\n\nA player type for the iterated public goods game. The API requireds the following  fields, but more can be added to support your player's strategy.\n\nFields\n\nid::Symbol: a unique name for the player \nids::T: a list of all player ids excluding player\ntrial_start_money: the money provided at the begining of each trial \ntotal_money: the cumulative money earned across completed trials \n\n\n\n\n\n","category":"type"},{"location":"api/#PublicGoodsTournement.Papi-Tuple{}","page":"API","title":"PublicGoodsTournement.Papi","text":"Papi(; id, ids, game_config)\n\nA constructor for the Papi player type. Additional keyword arguments can be added and passed via  args in the function battle!.\n\nKeywords\n\nid: the Papi player id \nids: a list of all player ids excluding player\ngame_config: a set of keywords corresponding to parameters of the iterated public goods game\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.PublicGoodsGame","page":"API","title":"PublicGoodsTournement.PublicGoodsGame","text":"PublicGoodsGame{T} <: AbstractPublicGoodsGame\n\nA standard public goods game object with the option for punishment. Punishments are deducted from an player's  total money  \n\nFields\n\ntotal_money::Dict{T, Float64}: the total amount of money for each player\npublic_goods_multiplier::Float64: the amount by which pooled contributions are multipled\ntrial_start_money: the amount of money given to an player at the begining of each trial\nmax_punishment_amount::Float64: the maximum amount that an player can punish on any given trial\n\nConstructors\n\nPublicGoodsGame(;     ids,     publicgoodsmultiplier,     trialstartmoney,     maxpunishmentamount )\n\nPublicGoodsGame(     totalmoney,     publicgoodsmultiplier,     trialstartmoney,     maxpunishment_amount )\n\n\n\n\n\n","category":"type"},{"location":"api/#Public-Functions","page":"API","title":"Public Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [PublicGoodsTournement]\nOrder   = [:function]\nPrivate = false","category":"page"},{"location":"api/#PublicGoodsTournement.battle!-Tuple{}","page":"API","title":"PublicGoodsTournement.battle!","text":"battle!(; n_trials, game_type, ids, types, args, game_config)\n\nPerforms a battle of n_trials of the iterated the public goods game between players specified in ids. On each trial, the following actions are performed:\n\nEach player is endowed with money \nEach contributes to the public good without knowing the contributions of the other players\nThe public good is updated based on contributions and divided among players \nThe players observe the contributions of others. \nThe players can punish the others and view the punishments of other players\n\nKeywords\n\nn_trials: the number of trials performed \ngame_type: the game type, which is used for the game constructor\ntypes: a tuple of player types\nargs: a tuple of NamedTuples consisting keyword arguments passed to the player constructors\nids: a list of all player ids \ngame_config: a set of keywords corresponding to parameters of the iterated public goods game\n\nReturns\n\ngame::game_type: a game constraining game configuration parameters and total money for each player\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.contribute-Tuple{Type{<:AbstractPublicGoodsGame}, AbstractPlayer}","page":"API","title":"PublicGoodsTournement.contribute","text":"contribute(game_type::Type{<:AbstractPublicGoodsGame}, player::AbstractPlayer)\n\nContribute to the public good.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::AbstractPlayer: an abstract player type \n\nReturns\n\ncontribution::Float64: the amount contributed to the public good\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.contribute-Tuple{Type{<:AbstractPublicGoodsGame}, Chris}","page":"API","title":"PublicGoodsTournement.contribute","text":"contribute(game_type::Type{<:AbstractPublicGoodsGame}, player::Chris)\n\nContribute to the public good.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::Chris: an abstract player type \n\nReturns\n\ncontribution::Float64: the amount contributed to the public good\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.contribute-Tuple{Type{<:AbstractPublicGoodsGame}, Cuck}","page":"API","title":"PublicGoodsTournement.contribute","text":"contribute(game_type::Type{<:AbstractPublicGoodsGame}, player::Cuck)\n\nContribute to the public good.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::Cuck: an abstract player type \n\nReturns\n\ncontribution::Float64: the amount contributed to the public good\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.contribute-Tuple{Type{<:AbstractPublicGoodsGame}, Dad}","page":"API","title":"PublicGoodsTournement.contribute","text":"contribute(game_type::Type{<:AbstractPublicGoodsGame}, player::Dad)\n\nContribute to the public good.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::Dad: an abstract player type \n\nReturns\n\ncontribution::Float64: the amount contributed to the public good\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.contribute-Tuple{Type{<:AbstractPublicGoodsGame}, DoucheBag}","page":"API","title":"PublicGoodsTournement.contribute","text":"contribute(game_type::Type{<:AbstractPublicGoodsGame}, player::DoucheBag)\n\nContribute to the public good.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::DoucheBag: an abstract player type \n\nReturns\n\ncontribution::Float64: the amount contributed to the public good\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.contribute-Tuple{Type{<:AbstractPublicGoodsGame}, Mary}","page":"API","title":"PublicGoodsTournement.contribute","text":"contribute(game_type::Type{<:AbstractPublicGoodsGame}, player::Mary)\n\nContribute to the public good.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::Mary: an abstract player type \n\nReturns\n\ncontribution::Float64: the amount contributed to the public good\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.contribute-Tuple{Type{<:AbstractPublicGoodsGame}, Papi}","page":"API","title":"PublicGoodsTournement.contribute","text":"contribute(game_type::Type{<:AbstractPublicGoodsGame}, player::Papi)\n\nContribute to the public good.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::Papi: an abstract player type \n\nReturns\n\ncontribution::Float64: the amount contributed to the public good\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.observe_punishments!-Union{Tuple{N}, Tuple{T}, Tuple{Type{<:AbstractPublicGoodsGame}, AbstractPlayer, T, Dict{T, N}}} where {T, N}","page":"API","title":"PublicGoodsTournement.observe_punishments!","text":"observe_punishments!(\n    game_type::Type{<:AbstractPublicGoodsGame},\n    player::AbstractPlayer,\n    punisher_id::T,\n    punishment::Dict{T, N}\n)\n\nOptionally observe the punishments from the punisher.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::AbstractPlayer: an abstract player type \ncontributions::Dict{T,N}: each player's contribution: id => contribution\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.observe_punishments!-Union{Tuple{N}, Tuple{T}, Tuple{Type{<:AbstractPublicGoodsGame}, Chris, T, Dict{T, N}}} where {T, N}","page":"API","title":"PublicGoodsTournement.observe_punishments!","text":"observe_punishments!(\n    game_type::Type{<:AbstractPublicGoodsGame},\n    player::Chris,\n    punisher_id::T,\n    punishment::Dict{T, N}\n)\n\nOptionally observe the punishments from the punisher.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::Chris: an abstract player type \ncontributions::Dict{T,N}: each player's contribution: id => contribution\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.observe_punishments!-Union{Tuple{N}, Tuple{T}, Tuple{Type{<:AbstractPublicGoodsGame}, Cuck, T, Dict{T, N}}} where {T, N}","page":"API","title":"PublicGoodsTournement.observe_punishments!","text":"observe_punishments!(\n    game_type::Type{<:AbstractPublicGoodsGame},\n    player::Cuck,\n    punisher_id::T,\n    punishment::Dict{T, N}\n)\n\nOptionally observe the punishments from the punisher.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::Cuck: an abstract player type \ncontributions::Dict{T,N}: each player's contribution: id => contribution\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.observe_punishments!-Union{Tuple{N}, Tuple{T}, Tuple{Type{<:AbstractPublicGoodsGame}, Dad, T, Dict{T, N}}} where {T, N}","page":"API","title":"PublicGoodsTournement.observe_punishments!","text":"observe_punishments!(\n    game_type::Type{<:AbstractPublicGoodsGame},\n    player::Dad,\n    punisher_id::T,\n    punishment::Dict{T, N}\n)\n\nOptionally observe the punishments from the punisher.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::Dad: an abstract player type \ncontributions::Dict{T,N}: each player's contribution: id => contribution\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.observe_punishments!-Union{Tuple{N}, Tuple{T}, Tuple{Type{<:AbstractPublicGoodsGame}, DoucheBag, T, Dict{T, N}}} where {T, N}","page":"API","title":"PublicGoodsTournement.observe_punishments!","text":"observe_punishments!(\n    game_type::Type{<:AbstractPublicGoodsGame},\n    player::DoucheBag,\n    punisher_id::T,\n    punishment::Dict{T, N}\n)\n\nOptionally observe the punishments from the punisher.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::DoucheBag: an abstract player type \ncontributions::Dict{T,N}: each player's contribution: id => contribution\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.observe_punishments!-Union{Tuple{N}, Tuple{T}, Tuple{Type{<:AbstractPublicGoodsGame}, Mary, T, Dict{T, N}}} where {T, N}","page":"API","title":"PublicGoodsTournement.observe_punishments!","text":"observe_punishments!(\n    game_type::Type{<:AbstractPublicGoodsGame},\n    player::Mary,\n    punisher_id::T,\n    punishment::Dict{T, N}\n)\n\nOptionally observe the punishments from the punisher.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::Mary: an abstract player type \ncontributions::Dict{T,N}: each player's contribution: id => contribution\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.observe_punishments!-Union{Tuple{N}, Tuple{T}, Tuple{Type{<:AbstractPublicGoodsGame}, Papi, T, Dict{T, N}}} where {T, N}","page":"API","title":"PublicGoodsTournement.observe_punishments!","text":"observe_punishments!(\n    game_type::Type{<:AbstractPublicGoodsGame},\n    player::Papi,\n    punisher_id::T,\n    punishment::Dict{T, N}\n)\n\nOptionally observe the punishments from the punisher.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::Papi: an abstract player type \ncontributions::Dict{T,N}: each player's contribution: id => contribution\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.punish-Tuple{Type{<:AbstractPublicGoodsGame}, AbstractPlayer}","page":"API","title":"PublicGoodsTournement.punish","text":"punish(game_type::Type{<:AbstractPublicGoodsGame}, player::AbstractPlayer)\n\nOptionally setup player before playing iterated public goods game.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::AbstractPlayer: an abstract player type \n\nReturns\n\npunishments::Dict{T, Float64}: punishment amount associated with each player: id => punishment\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.punish-Tuple{Type{<:AbstractPublicGoodsGame}, Chris}","page":"API","title":"PublicGoodsTournement.punish","text":"punish(game_type::Type{<:AbstractPublicGoodsGame}, player::Chris, ids)\n\nOptionally setup player before playing iterated public goods game.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::Chris: an abstract player type \n\nReturns\n\npunishments::Dict{T, Float64}: punishment amount associated with each player: id => punishment\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.punish-Tuple{Type{<:AbstractPublicGoodsGame}, Cuck}","page":"API","title":"PublicGoodsTournement.punish","text":"punish(game_type::Type{<:AbstractPublicGoodsGame}, player::Cuck, ids)\n\nOptionally setup player before playing iterated public goods game.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::Cuck: an abstract player type \n\nReturns\n\npunishments::Dict{T, Float64}: punishment amount associated with each player: id => punishment\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.punish-Tuple{Type{<:AbstractPublicGoodsGame}, Dad}","page":"API","title":"PublicGoodsTournement.punish","text":"punish(game_type::Type{<:AbstractPublicGoodsGame}, player::Dad, ids)\n\nOptionally setup player before playing iterated public goods game.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::Dad: an abstract player type \n\nReturns\n\npunishments::Dict{T, Float64}: punishment amount associated with each player: id => punishment\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.punish-Tuple{Type{<:AbstractPublicGoodsGame}, DoucheBag}","page":"API","title":"PublicGoodsTournement.punish","text":"punish(game_type::Type{<:AbstractPublicGoodsGame}, player::DoucheBag, ids)\n\nOptionally setup player before playing iterated public goods game.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::DoucheBag: an abstract player type \n\nReturns\n\npunishments::Dict{T, Float64}: punishment amount associated with each player: id => punishment\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.punish-Tuple{Type{<:AbstractPublicGoodsGame}, Mary}","page":"API","title":"PublicGoodsTournement.punish","text":"punish(game_type::Type{<:AbstractPublicGoodsGame}, player::Mary, ids)\n\nOptionally setup player before playing iterated public goods game.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::Mary: an abstract player type \n\nReturns\n\npunishments::Dict{T, Float64}: punishment amount associated with each player: id => punishment\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.punish-Tuple{Type{<:AbstractPublicGoodsGame}, Papi}","page":"API","title":"PublicGoodsTournement.punish","text":"punish(game_type::Type{<:AbstractPublicGoodsGame}, player::Papi, ids)\n\nOptionally setup player before playing iterated public goods game.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::Papi: an abstract player type \n\nReturns\n\npunishments::Dict{T, Float64}: punishment amount associated with each player: id => punishment\n\n\n\n\n\n","category":"method"},{"location":"api/#Private-Functions","page":"API","title":"Private Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [PublicGoodsTournement]\nOrder   = [:function]\nPrivate = true","category":"page"},{"location":"api/#PublicGoodsTournement.observe_contributions!-Tuple{Type{<:AbstractPublicGoodsGame}, AbstractPlayer, Dict}","page":"API","title":"PublicGoodsTournement.observe_contributions!","text":"observe_contributions!(\n    game_type::Type{<:AbstractPublicGoodsGame},\n    player::AbstractPlayer,\n    contributions::Dict{T, N}\n)\n\nOptionally observe each players contribution.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::AbstractPlayer: an abstract player type \ncontributions::Dict: each player's contribution: id => contribution\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.observe_contributions!-Tuple{Type{<:AbstractPublicGoodsGame}, Chris, Dict}","page":"API","title":"PublicGoodsTournement.observe_contributions!","text":"observe_contributions!(\n    game_type::Type{<:AbstractPublicGoodsGame},\n    player::Chris,\n    contributions::Dict\n)\n\nOptionally observe each players contribution.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::Chris: an abstract player type \ncontributions::Dict: each player's contribution: id => contribution\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.observe_contributions!-Tuple{Type{<:AbstractPublicGoodsGame}, Cuck, Dict}","page":"API","title":"PublicGoodsTournement.observe_contributions!","text":"observe_contributions!(\n    game_type::Type{<:AbstractPublicGoodsGame},\n    player::Cuck,\n    contributions::Dict\n)\n\nOptionally observe each players contribution.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::Cuck: an abstract player type \ncontributions::Dict: each player's contribution: id => contribution\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.observe_contributions!-Tuple{Type{<:AbstractPublicGoodsGame}, Dad, Dict}","page":"API","title":"PublicGoodsTournement.observe_contributions!","text":"observe_contributions!(\n    game_type::Type{<:AbstractPublicGoodsGame},\n    player::Dad,\n    contributions::Dict\n)\n\nOptionally observe each players contribution.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::Dad: an abstract player type \ncontributions::Dict: each player's contribution: id => contribution\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.observe_contributions!-Tuple{Type{<:AbstractPublicGoodsGame}, DoucheBag, Dict}","page":"API","title":"PublicGoodsTournement.observe_contributions!","text":"observe_contributions!(\n    game_type::Type{<:AbstractPublicGoodsGame},\n    player::DoucheBag,\n    contributions::Dict\n)\n\nOptionally observe each players contribution.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::DoucheBag: an abstract player type \ncontributions::Dict: each player's contribution: id => contribution\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.observe_contributions!-Tuple{Type{<:AbstractPublicGoodsGame}, Mary, Dict}","page":"API","title":"PublicGoodsTournement.observe_contributions!","text":"observe_contributions!(\n    game_type::Type{<:AbstractPublicGoodsGame},\n    player::Mary,\n    contributions::Dict\n)\n\nOptionally observe each players contribution.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::Mary: an abstract player type \ncontributions::Dict: each player's contribution: id => contribution\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.observe_contributions!-Tuple{Type{<:AbstractPublicGoodsGame}, Papi, Dict}","page":"API","title":"PublicGoodsTournement.observe_contributions!","text":"observe_contributions!(\n    game_type::Type{<:AbstractPublicGoodsGame},\n    player::Papi,\n    contributions::Dict\n)\n\nOptionally observe each players contribution.\n\nArguments\n\ngame_type::Type{<:AbstractPublicGoodsGame}: public goods game type \nplayer::Papi: an abstract player type \ncontributions::Dict: each player's contribution: id => contribution\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.update_money!-Tuple{AbstractPublicGoodsGame, Dict, Dict}","page":"API","title":"PublicGoodsTournement.update_money!","text":"update_money!(game::AbstractPublicGoodsGame, players::Dict, contributions::Dict)\n\nUpdate total money for game and each agent.\n\nArguments\n\nGame:::AbstractPublicGoodsGame: public goods game type \nplayers::Dict: mapping of id to player objects: id => player\ncontributions::Dict: mapping of id to contributions: id => contribution\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"public_goods_game/#Public-Goods-Game","page":"Public Goods Games","title":"Public Goods Game","text":"","category":"section"},{"location":"public_goods_game/","page":"Public Goods Games","title":"Public Goods Games","text":"The public goods game is a classic social dillema characterized by conflict between the goals of the individual and the goals of a group. In the standard public goods game, each player p in mathbfp = 1 2 dots n is given an initial amount of money m  0 and contributes c_p in 0 m to a public good. Each player makes this decision without knowing the contribution of the other players. Once all players have contributed, the contributions are summed, multiplied by a factor 1  g  n and divided evenly among all n players. Thus, the payout for each player is:","category":"page"},{"location":"public_goods_game/","page":"Public Goods Games","title":"Public Goods Games","text":"textrmpayout = fracgnsum_p=1^n c_p","category":"page"},{"location":"public_goods_game/","page":"Public Goods Games","title":"Public Goods Games","text":"At the end, the total money each player has is ","category":"page"},{"location":"public_goods_game/","page":"Public Goods Games","title":"Public Goods Games","text":"t_ p = m - c_p + textrmpayout","category":"page"},{"location":"public_goods_game/","page":"Public Goods Games","title":"Public Goods Games","text":"So long as g  n, each player is better off by contributing nothing.  However, if all players follow that strategy, no one receives more than the initial endowment of m dollars. We can see why it is rational to contribute zero dollars if we exclude the contributions of other players from the equation above. This results in a linear function relating the player p's contribution to p's adjusted return:","category":"page"},{"location":"public_goods_game/","page":"Public Goods Games","title":"Public Goods Games","text":"t_ p^prime = m - c_p + fracg cdot c_pn = m + c_p cdot fracg-nn","category":"page"},{"location":"public_goods_game/","page":"Public Goods Games","title":"Public Goods Games","text":"The slope is negative so long g  n, which means each dollar contributed results in a loss, as illustrated below.","category":"page"},{"location":"public_goods_game/","page":"Public Goods Games","title":"Public Goods Games","text":"<details>\n<summary><b>Show Code</b></summary>","category":"page"},{"location":"public_goods_game/","page":"Public Goods Games","title":"Public Goods Games","text":"using Plots \nf(m, c, g, n) = m - c + g * c / n\nf(m, c, g, n) = m + c * ((g - n ) / n)\nn = 10\nm = 10\ng = 2\nx = 1:10\ny = f.(m, x, g, n)\npayout_plot = plot(x, y, label = false, grid = false, xlabel = \"Contribution\", ylabel = \"Player Adjusted Return\")\nsavefig(\"payout_plot.png\")","category":"page"},{"location":"public_goods_game/","page":"Public Goods Games","title":"Public Goods Games","text":"</details>","category":"page"},{"location":"public_goods_game/","page":"Public Goods Games","title":"Public Goods Games","text":"(Image: )","category":"page"},{"location":"public_goods_game/#The-Iterated-Public-Goods-Game-with-Punishment","page":"Public Goods Games","title":"The Iterated Public Goods Game with Punishment","text":"","category":"section"},{"location":"public_goods_game/","page":"Public Goods Games","title":"Public Goods Games","text":"In the tournament, we will use a variation of the public goods game involving multiple rounds and the option to punish other players. This variant of the public goods game is interesting because players can form reputations, adapt strategies, and retaliate.  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PublicGoodsTournement","category":"page"},{"location":"#Public-Goods-Game-Tournement","page":"Home","title":"Public Goods Game Tournement","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This repo contains code for running an iterative public goods game tournement between agents. Use the left panel to navigate the documentation.","category":"page"},{"location":"example/#Example","page":"Example","title":"Example","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"This example demonstrates how to create a Cuck player type. The cuck contributes its entire trial endowment to the public good regardless of the contributions of the players. The cuck never punishes other players for not contributing. ","category":"page"},{"location":"example/#Custom-Player-Type","page":"Example","title":"Custom Player Type","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"The first step is to create a type for the Cuck as shown below. At minimum, a sub-type of AbstractPlayer must have a field for id, a field for the ids of the other players, a field for each trial's endowment, and the total money accumulated. ","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"mutable struct Cuck{T} <: AbstractPlayer\n    id::Symbol\n    ids::T\n    trial_start_money::Float64\n    total_money::Float64\nend","category":"page"},{"location":"example/#Constructor","page":"Example","title":"Constructor","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"Each player type is associated with a contructor for creating instances of a player. The contructor below for the Cuck consists of the minimum required keyword arguments: the id of the Cuck, the ids of other players, and a NamedTuple of game configuration parameters. Additional keyword arguments created in the battle script (e.g., ) and passed to the constructor.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"function Cuck(; id, ids, game_config)\n    ids = setdiff(ids, [id])\n    return Cuck(id, ids, 0.0, 0.0)\nend","category":"page"},{"location":"example/#Required-Methods","page":"Example","title":"Required Methods","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"Each Player type implement a method for contribute and punish, both of which are described in turn. ","category":"page"},{"location":"example/#Contribute","page":"Example","title":"Contribute","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"The function contribute returns a value representing the players contribution for a given trial. The generic game_type argument for AbstractPublicGoodsGame is the default for any game type. Additional, methods can be created for specific game types as needed. The second argument is the player for the Cuck type. The contribution must be greater than or equal to zero and no greater than the trial start money. The Cuck contributes the maximum amount regardless of the contributions made by other players.   ","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"function contribute(game_type::Type{<:AbstractPublicGoodsGame}, player::Cuck)\n    return player.trial_start_money\nend","category":"page"},{"location":"example/#Punish","page":"Example","title":"Punish","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"The function punish allows a player to punish other players. As before, the generic game_type argument for AbstractPublicGoodsGame is the default for any game type. Additional, methods can be created for specific game types as needed. The output id a Dict that maps player id to punishment amount: id => punishment. As noted above, the Cuck does not punish the other players.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"function punish(game_type::Type{<:AbstractPublicGoodsGame}, player::Cuck)\n    return Dict(id => 0.0 for id ∈ player.ids)\nend","category":"page"},{"location":"example/#Optional-Methods","page":"Example","title":"Optional Methods","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"The API contains two option methods for observing contributions and punishments made by the other players. If these methods are not necessary, you may leave them empty or delete them altogether (in which case an empty method for AbstractPlayer is called).","category":"page"},{"location":"example/#Observe-Contributions","page":"Example","title":"Observe Contributions","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"The function observe_contributions! provides the player with the information about contributions of the other players and is called after all contributions are made. The Cuck's behavior does not depend on the contributions of others. Consequentially, it is left empty. However, you may add code to the function body, and track information by adding fields to your player type. ","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"function observe_contributions!(\n    game_type::Type{<:AbstractPublicGoodsGame},\n    player::Cuck,\n    contributions::Dict\n)\n\n    return nothing\nend","category":"page"},{"location":"example/#Observe-Punishments","page":"Example","title":"Observe Punishments","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"The function observe_punishments! provides the player with the information about punishments of the other players and is called after all punishments are made. The punisher id is provided along with the punishments it made to other players. This method is called once per player per round, which provides all information about all punishments made. The Cuck's behavior does not depend on the punishments of others. Consequentially, it is left empty. However, you may add code to the function body, and track information by adding fields to your player type. ","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"function observe_punishments!(\n    game_type::Type{<:AbstractPublicGoodsGame},\n    player::Cuck,\n    punisher_id::T,\n    punishment::Dict{T,N}\n) where {T,N}\n\n    return nothing\nend","category":"page"}]
}
