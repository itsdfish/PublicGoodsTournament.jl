var documenterSearchIndex = {"docs":
[{"location":"api/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [PublicGoodsTournement]\nOrder   = [:type]","category":"page"},{"location":"api/#PublicGoodsTournement.AbstractPlayer","page":"API","title":"PublicGoodsTournement.AbstractPlayer","text":"AbstractPlayer\n\nAn abstract player type for the public goods game. Subtypes of this abstract type must have the following fields\n\nFields\n\nid: unique player id \ntrial_money::Float64: the amount of money at the beginning of a trial\n\n\n\n\n\n","category":"type"},{"location":"api/#PublicGoodsTournement.AbstractPublicGoodsGame","page":"API","title":"PublicGoodsTournement.AbstractPublicGoodsGame","text":"AbstractPublicGoodsGame\n\nAn abstract public goods game object which expects the following fields.\n\nFields\n\ntotal_money::Dict{T, Float64}: the total amount of money for each player\npublic_goods_multiplier::Float64: the amount by which pooled contributions are multipled\ntrial_start_amount: the amount of money given to an player at the begining of each trial\nmax_punishment_amount::Float64: the maximum amount that an player can punish on any given trial\n\n\n\n\n\n","category":"type"},{"location":"api/#PublicGoodsTournement.PublicGoodsGame","page":"API","title":"PublicGoodsTournement.PublicGoodsGame","text":"PublicGoodsGame{T} <: AbstractPublicGoodsGame\n\nA standard public goods game object with the option for punishment. Punishments are deducted from an player's  total money  \n\nFields\n\ntotal_money::Dict{T, Float64}: the total amount of money for each player\npublic_goods_multiplier::Float64: the amount by which pooled contributions are multipled\ntrial_start_amount: the amount of money given to an player at the begining of each trial\nmax_punishment_amount::Float64: the maximum amount that an player can punish on any given trial\n\nConstructors\n\nPublicGoodsGame(;     ids,     publicgoodsmultiplier,     trialstartamount,     maxpunishmentamount )\n\nPublicGoodsGame(     totalmoney,     publicgoodsmultiplier,     trialstartamount,     maxpunishment_amount )\n\n\n\n\n\n","category":"type"},{"location":"api/#Public-Functions","page":"API","title":"Public Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [PublicGoodsTournement]\nOrder   = [:function]\nPrivate = false","category":"page"},{"location":"api/#PublicGoodsTournement.contribute-Tuple{AbstractPlayer}","page":"API","title":"PublicGoodsTournement.contribute","text":"contribute(player::AbstractPlayer)\n\nContribute to the public good.\n\nArguments\n\nplayer::AbstractPlayer: an abstract player type \n\ncontribute(player::AbstractPlayer)\n\nReturns\n\ncontribution::Float64: the amount contributed to the public good\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.punish-Tuple{AbstractPlayer, Any}","page":"API","title":"PublicGoodsTournement.punish","text":"punish(player::AbstractPlayer, ids)\n\nOptionally setup player before playing iterated public goods game.\n\nArguments\n\nplayer::AbstractPlayer: an abstract player type \nids: a collection of player ids \n\nReturns\n\npunishments::Dict{T, Float64}: punishment amount associated with each player: id => punishment\n\n\n\n\n\n","category":"method"},{"location":"api/#PublicGoodsTournement.setup!-Tuple{AbstractPlayer, Any, Any}","page":"API","title":"PublicGoodsTournement.setup!","text":"setup!(player::AbstractPlayer, ids, game_config)\n\nOptionally setup player before playing iterated public goods game.\n\nArguments\n\nplayer::AbstractPlayer: an abstract player type \nids: a collection of player ids \ngame_config: keyword arguments of game options\n\n\n\n\n\n","category":"method"},{"location":"api/#Private-Functions","page":"API","title":"Private Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [PublicGoodsTournement]\nOrder   = [:function]\nPrivate = true","category":"page"},{"location":"api/#PublicGoodsTournement.observe_contributions!-Union{Tuple{T}, Tuple{AbstractPlayer, Dict{T, Float64}}} where T","page":"API","title":"PublicGoodsTournement.observe_contributions!","text":"observe_contributions!(player::AbstractPlayer, contributions::Dict{T,Float64})\n\nObserve each players contribution.\n\nArguments\n\nplayer::AbstractPlayer: an abstract player type \ncontributions::Dict{T,Float64}: each player's contribution: id => contribution\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PublicGoodsTournement","category":"page"},{"location":"#PublicGoodsTournement","page":"Home","title":"PublicGoodsTournement","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PublicGoodsTournement.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PublicGoodsTournement]","category":"page"}]
}
